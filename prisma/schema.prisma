generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("directUrl")
}

// Model untuk Pengguna (Super Admin & Admin Satker)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  nama      String
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi: Seorang Admin Satker mengelola satu Satker
  satker   Satker? @relation(fields: [satkerId], references: [id], onDelete: SetNull)
  satkerId String? @unique
}

model Satker {
  id                    String                 @id @default(cuid())
  kode                  String                 @unique
  nama                  String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  admin                 User?
  personil              Personil[]
  ht                    HT[]
  peminjamanOlehSatker  PeminjamanSatker[]     // Riwayat peminjaman DARI Super Admin
  pengajuanPeminjaman   PengajuanPeminjaman[]
  pengajuanMutasiAsal   PengajuanMutasi[]      @relation("SatkerAsal")
  pengajuanMutasiTujuan PengajuanMutasi[]      @relation("SatkerTujuan")
}

model Personil {
  id          String        @id @default(cuid())
  nrp         String        @unique
  nama        String
  jabatan     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  satker      Satker        @relation(fields: [satkerId], references: [id], onDelete: Cascade)
  satkerId    String
  peminjaman  Peminjaman[]
  pengajuanMutasi PengajuanMutasi[]
}

model HT {
  id                   String               @id @default(cuid())
  serialNumber         String               @unique
  kodeHT               String               @unique
  merk                 String
  jenis                String
  tahunBuat            Int
  tahunPeroleh         Int
  status               HTStatus             @default(BAIK)
  catatanKondisi       String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  // --- PERUBAHAN UTAMA ---
  // satkerId dibuat opsional. Jika null, HT ini milik Gudang Pusat.
  satker               Satker?              @relation(fields: [satkerId], references: [id])
  satkerId             String?

  // Relasi untuk dua jenis peminjaman
  peminjaman           Peminjaman[]         // Riwayat peminjaman internal di Satker
  peminjamanOlehSatker PeminjamanSatker[]   // Riwayat peminjaman dari Super Admin ke Satker

  @@map("HT")
}


// --- MODEL TRANSAKSI & PENGAJUAN ---

// Peminjaman INTERNAL: Admin Satker -> Personil
model Peminjaman {
  id                 String    @id @default(cuid())
  tanggalPinjam      DateTime  @default(now())
  tanggalKembali     DateTime?
  kondisiSaatPinjam  String
  kondisiSaatKembali String?
  catatan            String?
  adminPencatatId    String
  ht                 HT        @relation(fields: [htId], references: [id], onDelete: Cascade)
  htId               String
  personil           Personil  @relation(fields: [personilId], references: [id], onDelete: Cascade)
  personilId         String
}

// --- MODEL BARU ---
// Peminjaman EKSTERNAL: Super Admin -> Satker
model PeminjamanSatker {
  id             String    @id @default(cuid())
  tanggalPinjam  DateTime  @default(now())
  tanggalKembali DateTime? // Diisi jika Satker mengembalikan HT ke Gudang Pusat
  catatan        String?
  ht             HT        @relation(fields: [htId], references: [id], onDelete: Cascade)
  htId           String    @unique // Satu HT hanya bisa dipinjam oleh satu Satker pada satu waktu
  satker         Satker    @relation(fields: [satkerId], references: [id], onDelete: Cascade)
  satkerId       String
}

model PengajuanPeminjaman {
  id           String          @id @default(cuid())
  keperluan    String
  jumlah       Int
  status       PengajuanStatus @default(PENDING)
  catatanAdmin String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  satkerPengaju Satker          @relation(fields: [satkerId], references: [id], onDelete: Cascade)
  satkerId     String
}

model PengajuanMutasi {
  id             String          @id @default(cuid())
  alasan         String
  status         PengajuanStatus @default(PENDING)
  catatanAdmin   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  personil       Personil        @relation(fields: [personilId], references: [id])
  personilId     String
  satkerAsal     Satker          @relation("SatkerAsal", fields: [satkerAsalId], references: [id])
  satkerAsalId   String
  satkerTujuan   Satker          @relation("SatkerTujuan", fields: [satkerTujuanId], references: [id])
  satkerTujuanId String
}

// --- ENUMS ---
enum Role {
  SUPER_ADMIN
  ADMIN_SATKER
}

enum HTStatus {
  BAIK
  RUSAK_RINGAN
  RUSAK_BERAT
  HILANG
}

enum PengajuanStatus {
  PENDING
  APPROVED
  REJECTED
}
